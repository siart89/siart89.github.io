{"version":3,"sources":["components/addList.js","components/taskBtns.js","components/listElement.js","components/generateList.js","components/switchTask.js","components/mainToDoBox.js","App.js","serviceWorker.js","index.js"],"names":["AddList","props","className","onClick","TaskBtns","classM","status","statusOn","statusOff","ListItem","state","isDone","statusOfDone","isFocused","handleChange","bind","handleRemoveTask","handleOnFocus","handleOnBlur","this","setState","taskIsDone","value","id","RemoveTask","onFocus","onBlur","tabIndex","hideBtns","React","Component","GenerateList","elem","listArr","map","item","doneStatus","forEach","taskValue","key","removeTask","isHiden","SwitchTask","nameOfClass","titleName","amount","ListBox","allDoneTasks","removHistory","showRemoved","showCompleted","showAll","handleOnClick","handleOnChange","handleKeyDown","doDoneTasks","allDeleted","handleChangeListToRemoved","handleChangeListToAll","handleChangeListToCompleted","handleClearList","list","slice","require","newTask","push","e","target","set","nowDone","i","length","splice","newArr","allTasks","removed","isHidenBtns","type","onChange","onKeyDown","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3917b0f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction AddList(props) {\r\n    return (\r\n        <div className='add-btn-cont'>\r\n            <button\r\n                onClick={props.onClick}\r\n                className='button add-task__btn'>\r\n                &#10010;\r\n            </button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default AddList;","import React from 'react';\r\n\r\nfunction TaskBtns(props) {\r\n\r\n    return (\r\n        <div className={props.classM}>\r\n            <div\r\n                className={props.status ? props.statusOn : props.statusOff}\r\n                onClick={props.onClick}>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskBtns;","import React from 'react';\r\nimport TaskBtns from './taskBtns';\r\n\r\nclass ListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isDone: this.props.statusOfDone || false,\r\n            isFocused: false,\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleRemoveTask = this.handleRemoveTask.bind(this);\r\n        this.handleOnFocus = this.handleOnFocus.bind(this);\r\n        this.handleOnBlur = this.handleOnBlur.bind(this);\r\n\r\n    }\r\n    handleChange() {\r\n        this.setState({\r\n            isDone: !this.state.isDone,\r\n        });\r\n        this.props.taskIsDone(!this.state.isDone, this.props.value, this.props.id);\r\n\r\n    }\r\n    handleRemoveTask() {\r\n        this.props.RemoveTask(true, this.props.id)\r\n    }\r\n    handleOnFocus() {\r\n        this.setState({\r\n            isFocused: true,\r\n        });\r\n    }\r\n    handleOnBlur() {\r\n        this.setState({\r\n            isFocused: false,\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const show =\r\n            <li className='task-title'\r\n                onFocus={this.handleOnFocus}\r\n                onBlur={this.handleOnBlur}\r\n                tabIndex='0'>\r\n                {this.props.hideBtns && \r\n                    <TaskBtns\r\n                    classM='check-btn'\r\n                    status={this.state.isDone}\r\n                    statusOn='check-btn__inner check-btn__inner_checked'\r\n                    statusOff='check-btn__inner'\r\n                    onClick={this.handleChange}\r\n                />\r\n                }\r\n                \r\n                <div\r\n                    className={this.state.isDone ? 'task-title__text task-title__done' : 'task-title__text'}>\r\n                    {this.props.value}\r\n                </div>\r\n\r\n                {this.props.hideBtns && this.state.isFocused &&\r\n                    <TaskBtns\r\n                        classM='delete-btn'\r\n                        status={true}\r\n                        statusOn='delete-btn__inner delete-btn__inner_onFocus '\r\n                        onClick={this.handleRemoveTask}\r\n                    />\r\n                }\r\n\r\n            </li>;\r\n\r\n        return (\r\n            show\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from './listElement';\r\n\r\n\r\nclass GenerateList extends React.Component {\r\n\r\n    render() {\r\n        \r\n        const elem = this.props.listArr.map((item) => {\r\n            let status = false;\r\n\r\n            this.props.doneStatus.forEach(state => {\r\n                if (state.id === item.id) status = true;\r\n            });\r\n\r\n            return (<ListItem\r\n                value={item.taskValue}\r\n                key={item.id}\r\n                taskIsDone={this.props.isDone}\r\n                RemoveTask={this.props.removeTask}\r\n                id={item.id}\r\n                statusOfDone={status}\r\n                hideBtns={this.props.isHiden}\r\n            />)\r\n        }\r\n\r\n        )\r\n        return (\r\n            <ul className='list'>\r\n                {elem}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default GenerateList;","import React from 'react';\r\n\r\nfunction SwitchTask(props) {\r\n    return (\r\n        <span className='count-unit'>\r\n            <span\r\n                onClick={props.onClick}\r\n                className={props.nameOfClass}>\r\n                {props.titleName} {props.amount}\r\n            </span>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default SwitchTask;","import React from 'react';\r\nimport AddList from './addList';\r\nimport GenerateList from './generateList';\r\nimport SwitchTask from './switchTask';\r\n\r\nclass ListBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            listArr: [],\r\n            value: '',\r\n            allDoneTasks: [],\r\n            removHistory: [],\r\n            showRemoved: false,\r\n            showCompleted: false,\r\n            showAll: true,\r\n        };\r\n        this.handleOnClick = this.handleOnClick.bind(this);\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.doDoneTasks = this.doDoneTasks.bind(this);\r\n        this.allDeleted = this.allDeleted.bind(this);\r\n        this.handleChangeListToRemoved = this.handleChangeListToRemoved.bind(this);\r\n        this.handleChangeListToAll = this.handleChangeListToAll.bind(this);\r\n        this.handleChangeListToCompleted = this.handleChangeListToCompleted.bind(this);\r\n        this.handleClearList = this.handleClearList.bind(this);\r\n    }\r\n\r\n    handleOnClick() {\r\n        const list = this.state.listArr.slice();\r\n        let key = require('uniqid')();\r\n\r\n        if (!this.state.value) return;\r\n\r\n        let newTask = {\r\n            taskValue: this.state.value,\r\n            id: key,\r\n            isDone: false,\r\n        };\r\n        list.push(newTask);\r\n\r\n        this.setState({\r\n            listArr: list,\r\n            value: '',\r\n        });\r\n    }\r\n\r\n    handleOnChange(e) {\r\n        this.setState({\r\n            value: e.target.value,\r\n        })\r\n\r\n    }\r\n\r\n    handleKeyDown(e) {\r\n        if (e.key !== 'Enter') return;\r\n        this.handleOnClick()\r\n    }\r\n    // поставить галочку \"сделано\"\r\n    doDoneTasks(set, value, id) {\r\n        const nowDone = this.state.allDoneTasks.slice();\r\n\r\n        if (set) {\r\n            for (let item of this.state.allDoneTasks) {\r\n                if (item.id === id) return;\r\n            }\r\n            let newTask = {\r\n                taskValue: value,\r\n                id: id,\r\n                isDone: true,\r\n            };\r\n            nowDone.push(newTask);\r\n\r\n        } else {\r\n            for (let i = 0; i < nowDone.length; i++) {\r\n                if (nowDone[i].id === id) {\r\n                    nowDone.splice(i, 1)\r\n                }\r\n            }\r\n\r\n        };\r\n        this.setState({\r\n            allDoneTasks: nowDone,\r\n\r\n        });\r\n    }\r\n    // удаление строки\r\n    allDeleted(set, id) {\r\n        const allTasks = this.state.listArr.slice();\r\n        const nowDone = this.state.allDoneTasks.slice();\r\n        const removed = this.state.removHistory.slice();\r\n        let newArr;\r\n\r\n        if (set) {\r\n            for (let i = 0; i < allTasks.length; i++) {\r\n                if (allTasks[i].id === id) {\r\n                    newArr = (allTasks.splice(i, 1))\r\n                    removed.push(newArr[0]);\r\n                }\r\n            };\r\n\r\n            for (let i = 0; i < nowDone.length; i++) {\r\n                if (nowDone[i].id === id) {\r\n                    nowDone.splice(i, 1)\r\n                }\r\n            };\r\n        };\r\n\r\n        this.setState({\r\n            allDoneTasks: nowDone,\r\n            listArr: allTasks,\r\n            removHistory: removed,\r\n        });\r\n    }\r\n\r\n    handleChangeListToRemoved() {\r\n        if (this.state.removHistory.length === 0) return;\r\n        this.setState({\r\n            showRemoved: true,\r\n            showCompleted: false\r\n        })\r\n    }\r\n    handleChangeListToAll() {\r\n        this.setState({\r\n            showRemoved: false,\r\n            showCompleted: false,\r\n        })\r\n    }\r\n\r\n    handleChangeListToCompleted() {\r\n        this.setState({\r\n            showCompleted: true,\r\n            showRemoved: false,\r\n        })\r\n    }\r\n    handleClearList() {\r\n        this.setState({\r\n            listArr: [],\r\n            value: '',\r\n            allDoneTasks: [],\r\n            removHistory: [],\r\n            showRemoved: false,\r\n            showCompleted: false,\r\n            showAll: true,\r\n        })\r\n    }\r\n    render() {\r\n        let isHidenBtns = (this.state.showRemoved ? false : true)\r\n        return (\r\n            <div className='toDo-list'>\r\n                <h1 className='toDo-list__title'>TO-DO LIST</h1>\r\n                <div className='add-task'>\r\n                    <AddList onClick={this.handleOnClick} />\r\n                    <input\r\n                        className='input-task'\r\n                        type=\"text\"\r\n                        onChange={this.handleOnChange}\r\n                        onKeyDown={this.handleKeyDown}\r\n                        value={this.state.value}\r\n                        placeholder=\"Enter task\" />\r\n\r\n                </div>\r\n                <div className='tasks'>\r\n\r\n                    <GenerateList\r\n                        listArr={this.state.showRemoved ? this.state.removHistory :\r\n                            this.state.showCompleted ? this.state.allDoneTasks :\r\n                                this.state.listArr}\r\n                        isDone={this.doDoneTasks}\r\n                        removeTask={this.allDeleted}\r\n                        doneStatus={this.state.allDoneTasks}\r\n                        isHiden={isHidenBtns}\r\n\r\n                    />\r\n                </div>\r\n                <div className='count'>\r\n                    <SwitchTask\r\n                        onClick={this.handleChangeListToAll}\r\n                        titleName='All :'\r\n                        nameOfClass={(this.state.showCompleted || this.state.showRemoved) ? 'count-btn' : 'count-btn count-btn_onFocus'}\r\n                        amount={this.state.listArr.length}\r\n                    />\r\n\r\n                    <SwitchTask\r\n                        onClick={this.handleChangeListToCompleted}\r\n                        titleName='Completed :'\r\n                        nameOfClass={this.state.showCompleted ? 'count-btn count-btn_onFocus' : 'count-btn'}\r\n                        amount={this.state.allDoneTasks.length}\r\n                    />\r\n\r\n                    <SwitchTask\r\n                        onClick={this.handleChangeListToRemoved}\r\n                        titleName='Deleted :'\r\n                        nameOfClass={this.state.showRemoved ? 'count-btn count-btn_onFocus' : 'count-btn'}\r\n                        amount={this.state.removHistory.length}\r\n                    />\r\n                    <SwitchTask\r\n                        onClick={this.handleClearList}\r\n                        titleName='Clear'\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListBox;","import React from 'react';\nimport ListBox from './components/mainToDoBox';\n\nfunction App() {\n  return (\n    <div className='contanier'>\n      <ListBox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport style from './style.css';\nimport taskStyle from './taskStyle.css';\nimport reset from './reset.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}